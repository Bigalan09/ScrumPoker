/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { InputChangeEventDetail } from "./components/s-voting-card/s-voting-card";
export namespace Components {
    interface SButton {
        "ariaLabel": string;
        "disabled"?: boolean;
        "size"?: 'small' | 'large';
        "type"?: 'reset' | 'submit' | 'button';
        "variant"?: string;
    }
    interface SDashboard {
        "firebase": any;
    }
    interface SLogin {
        "firebase": any;
    }
    interface SVotingCard {
        "checked"?: boolean;
        "disabled"?: boolean;
        "value": string;
    }
    interface SVotingDeck {
        "value"?: string;
    }
}
declare global {
    interface HTMLSButtonElement extends Components.SButton, HTMLStencilElement {
    }
    var HTMLSButtonElement: {
        prototype: HTMLSButtonElement;
        new (): HTMLSButtonElement;
    };
    interface HTMLSDashboardElement extends Components.SDashboard, HTMLStencilElement {
    }
    var HTMLSDashboardElement: {
        prototype: HTMLSDashboardElement;
        new (): HTMLSDashboardElement;
    };
    interface HTMLSLoginElement extends Components.SLogin, HTMLStencilElement {
    }
    var HTMLSLoginElement: {
        prototype: HTMLSLoginElement;
        new (): HTMLSLoginElement;
    };
    interface HTMLSVotingCardElement extends Components.SVotingCard, HTMLStencilElement {
    }
    var HTMLSVotingCardElement: {
        prototype: HTMLSVotingCardElement;
        new (): HTMLSVotingCardElement;
    };
    interface HTMLSVotingDeckElement extends Components.SVotingDeck, HTMLStencilElement {
    }
    var HTMLSVotingDeckElement: {
        prototype: HTMLSVotingDeckElement;
        new (): HTMLSVotingDeckElement;
    };
    interface HTMLElementTagNameMap {
        "s-button": HTMLSButtonElement;
        "s-dashboard": HTMLSDashboardElement;
        "s-login": HTMLSLoginElement;
        "s-voting-card": HTMLSVotingCardElement;
        "s-voting-deck": HTMLSVotingDeckElement;
    }
}
declare namespace LocalJSX {
    interface SButton {
        "ariaLabel"?: string;
        "disabled"?: boolean;
        "size"?: 'small' | 'large';
        "type"?: 'reset' | 'submit' | 'button';
        "variant"?: string;
    }
    interface SDashboard {
        "firebase"?: any;
    }
    interface SLogin {
        "firebase"?: any;
        "onJoinCompleted"?: (event: CustomEvent<any>) => void;
    }
    interface SVotingCard {
        "checked"?: boolean;
        "disabled"?: boolean;
        "onSelected"?: (event: CustomEvent<InputChangeEventDetail>) => void;
        "value"?: string;
    }
    interface SVotingDeck {
        "value"?: string;
    }
    interface IntrinsicElements {
        "s-button": SButton;
        "s-dashboard": SDashboard;
        "s-login": SLogin;
        "s-voting-card": SVotingCard;
        "s-voting-deck": SVotingDeck;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "s-button": LocalJSX.SButton & JSXBase.HTMLAttributes<HTMLSButtonElement>;
            "s-dashboard": LocalJSX.SDashboard & JSXBase.HTMLAttributes<HTMLSDashboardElement>;
            "s-login": LocalJSX.SLogin & JSXBase.HTMLAttributes<HTMLSLoginElement>;
            "s-voting-card": LocalJSX.SVotingCard & JSXBase.HTMLAttributes<HTMLSVotingCardElement>;
            "s-voting-deck": LocalJSX.SVotingDeck & JSXBase.HTMLAttributes<HTMLSVotingDeckElement>;
        }
    }
}
